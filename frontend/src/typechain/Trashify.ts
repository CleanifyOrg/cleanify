/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Trashify {
  export type ReportStruct = {
    id: BigNumberish;
    creator: string;
    state: BigNumberish;
    cleaners: string[];
    metadata: string;
    proofs: string[];
    totalRewards: BigNumberish;
  };

  export type ReportStructOutput = [
    BigNumber,
    string,
    number,
    string[],
    string,
    string[],
    BigNumber
  ] & {
    id: BigNumber;
    creator: string;
    state: number;
    cleaners: string[];
    metadata: string;
    proofs: string[];
    totalRewards: BigNumber;
  };
}

export interface TrashifyInterface extends utils.Interface {
  functions: {
    "getPaginatedReports(uint256,uint256)": FunctionFragment;
    "reportIdToIndex(uint256)": FunctionFragment;
    "reports(uint256)": FunctionFragment;
    "submitReport(string)": FunctionFragment;
    "totalReports()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPaginatedReports"
      | "reportIdToIndex"
      | "reports"
      | "submitReport"
      | "totalReports"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPaginatedReports",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportIdToIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReport",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReports",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getPaginatedReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportIdToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReports",
    data: BytesLike
  ): Result;

  events: {
    "NewReportSubmited(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewReportSubmited"): EventFragment;
}

export interface NewReportSubmitedEventObject {
  reportId: BigNumber;
  creator: string;
}
export type NewReportSubmitedEvent = TypedEvent<
  [BigNumber, string],
  NewReportSubmitedEventObject
>;

export type NewReportSubmitedEventFilter =
  TypedEventFilter<NewReportSubmitedEvent>;

export interface Trashify extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrashifyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPaginatedReports(
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Trashify.ReportStructOutput[]]>;

    reportIdToIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, string, BigNumber] & {
        id: BigNumber;
        creator: string;
        state: number;
        metadata: string;
        totalRewards: BigNumber;
      }
    >;

    submitReport(
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalReports(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getPaginatedReports(
    page: BigNumberish,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Trashify.ReportStructOutput[]>;

  reportIdToIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reports(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, string, BigNumber] & {
      id: BigNumber;
      creator: string;
      state: number;
      metadata: string;
      totalRewards: BigNumber;
    }
  >;

  submitReport(
    _metadata: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalReports(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getPaginatedReports(
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Trashify.ReportStructOutput[]>;

    reportIdToIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, string, BigNumber] & {
        id: BigNumber;
        creator: string;
        state: number;
        metadata: string;
        totalRewards: BigNumber;
      }
    >;

    submitReport(_metadata: string, overrides?: CallOverrides): Promise<void>;

    totalReports(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NewReportSubmited(uint256,address)"(
      reportId?: BigNumberish | null,
      creator?: string | null
    ): NewReportSubmitedEventFilter;
    NewReportSubmited(
      reportId?: BigNumberish | null,
      creator?: string | null
    ): NewReportSubmitedEventFilter;
  };

  estimateGas: {
    getPaginatedReports(
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reportIdToIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reports(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    submitReport(
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalReports(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPaginatedReports(
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reportIdToIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitReport(
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalReports(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
