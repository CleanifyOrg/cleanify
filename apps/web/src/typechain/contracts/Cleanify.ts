/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Cleanify {
  export type ReportStruct = {
    id: BigNumberish;
    creator: string;
    state: BigNumberish;
    cleaners: string[];
    metadata: string;
    proofs: string[];
    totalRewards: BigNumberish;
  };

  export type ReportStructOutput = [
    BigNumber,
    string,
    number,
    string[],
    string,
    string[],
    BigNumber
  ] & {
    id: BigNumber;
    creator: string;
    state: number;
    cleaners: string[];
    metadata: string;
    proofs: string[];
    totalRewards: BigNumber;
  };
}

export interface CleanifyInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MODERATORS()": FunctionFragment;
    "addAdditionalProofs(uint256,string)": FunctionFragment;
    "addRewards(uint256)": FunctionFragment;
    "approveReport(uint256)": FunctionFragment;
    "deleteReport(uint256)": FunctionFragment;
    "getPaginatedReports(uint256,uint256)": FunctionFragment;
    "getReportById(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "handleVerificationRequest(uint256,bool)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isUserSubscribedAsCleaner(uint256,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "reportIdToIndex(uint256)": FunctionFragment;
    "reports(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setReportAsCleaned(uint256,string)": FunctionFragment;
    "submitReport(string)": FunctionFragment;
    "subscribeToClean(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalReports()": FunctionFragment;
    "updateReportMetadata(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MODERATORS"
      | "addAdditionalProofs"
      | "addRewards"
      | "approveReport"
      | "deleteReport"
      | "getPaginatedReports"
      | "getReportById"
      | "getRoleAdmin"
      | "grantRole"
      | "handleVerificationRequest"
      | "hasRole"
      | "isUserSubscribedAsCleaner"
      | "renounceRole"
      | "reportIdToIndex"
      | "reports"
      | "revokeRole"
      | "setReportAsCleaned"
      | "submitReport"
      | "subscribeToClean"
      | "supportsInterface"
      | "totalReports"
      | "updateReportMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODERATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdditionalProofs",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedReports",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReportById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleVerificationRequest",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserSubscribedAsCleaner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reportIdToIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportAsCleaned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReport",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToClean",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReports",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateReportMetadata",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MODERATORS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAdditionalProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleVerificationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserSubscribedAsCleaner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportIdToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReportAsCleaned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToClean",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReportMetadata",
    data: BytesLike
  ): Result;

  events: {
    "CleaningVerificationApproved(uint256)": EventFragment;
    "CleaningVerificationDenied(uint256)": EventFragment;
    "NewProofAdded(uint256,address,string)": EventFragment;
    "NewReportSubmited(uint256,address)": EventFragment;
    "ReportDeleted(uint256,address)": EventFragment;
    "ReportSetAsCleaned(uint256,address)": EventFragment;
    "ReportStateChanged(uint256,uint8)": EventFragment;
    "RewardAdded(uint256,address,uint256)": EventFragment;
    "RewardsDistributed(uint256,address[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "UserSubscribedToClean(uint256,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CleaningVerificationApproved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CleaningVerificationDenied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProofAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReportSubmited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportSetAsCleaned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserSubscribedToClean"): EventFragment;
}

export interface CleaningVerificationApprovedEventObject {
  reportId: BigNumber;
}
export type CleaningVerificationApprovedEvent = TypedEvent<
  [BigNumber],
  CleaningVerificationApprovedEventObject
>;

export type CleaningVerificationApprovedEventFilter =
  TypedEventFilter<CleaningVerificationApprovedEvent>;

export interface CleaningVerificationDeniedEventObject {
  reportId: BigNumber;
}
export type CleaningVerificationDeniedEvent = TypedEvent<
  [BigNumber],
  CleaningVerificationDeniedEventObject
>;

export type CleaningVerificationDeniedEventFilter =
  TypedEventFilter<CleaningVerificationDeniedEvent>;

export interface NewProofAddedEventObject {
  reportId: BigNumber;
  cleaner: string;
  proof: string;
}
export type NewProofAddedEvent = TypedEvent<
  [BigNumber, string, string],
  NewProofAddedEventObject
>;

export type NewProofAddedEventFilter = TypedEventFilter<NewProofAddedEvent>;

export interface NewReportSubmitedEventObject {
  reportId: BigNumber;
  creator: string;
}
export type NewReportSubmitedEvent = TypedEvent<
  [BigNumber, string],
  NewReportSubmitedEventObject
>;

export type NewReportSubmitedEventFilter =
  TypedEventFilter<NewReportSubmitedEvent>;

export interface ReportDeletedEventObject {
  reportId: BigNumber;
  creator: string;
}
export type ReportDeletedEvent = TypedEvent<
  [BigNumber, string],
  ReportDeletedEventObject
>;

export type ReportDeletedEventFilter = TypedEventFilter<ReportDeletedEvent>;

export interface ReportSetAsCleanedEventObject {
  reportId: BigNumber;
  cleaner: string;
}
export type ReportSetAsCleanedEvent = TypedEvent<
  [BigNumber, string],
  ReportSetAsCleanedEventObject
>;

export type ReportSetAsCleanedEventFilter =
  TypedEventFilter<ReportSetAsCleanedEvent>;

export interface ReportStateChangedEventObject {
  reportId: BigNumber;
  newState: number;
}
export type ReportStateChangedEvent = TypedEvent<
  [BigNumber, number],
  ReportStateChangedEventObject
>;

export type ReportStateChangedEventFilter =
  TypedEventFilter<ReportStateChangedEvent>;

export interface RewardAddedEventObject {
  reportId: BigNumber;
  contributor: string;
  amount: BigNumber;
}
export type RewardAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RewardAddedEventObject
>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardsDistributedEventObject {
  reportId: BigNumber;
  cleaners: string[];
}
export type RewardsDistributedEvent = TypedEvent<
  [BigNumber, string[]],
  RewardsDistributedEventObject
>;

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UserSubscribedToCleanEventObject {
  reportId: BigNumber;
  subscriber: string;
}
export type UserSubscribedToCleanEvent = TypedEvent<
  [BigNumber, string],
  UserSubscribedToCleanEventObject
>;

export type UserSubscribedToCleanEventFilter =
  TypedEventFilter<UserSubscribedToCleanEvent>;

export interface Cleanify extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CleanifyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MODERATORS(overrides?: CallOverrides): Promise<[string]>;

    addAdditionalProofs(
      _reportId: BigNumberish,
      _proof: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addRewards(
      _reportId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deleteReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPaginatedReports(
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Cleanify.ReportStructOutput[]]>;

    getReportById(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Cleanify.ReportStructOutput]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    handleVerificationRequest(
      _reportId: BigNumberish,
      _isCleaned: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUserSubscribedAsCleaner(
      _reportId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reportIdToIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, string, BigNumber] & {
        id: BigNumber;
        creator: string;
        state: number;
        metadata: string;
        totalRewards: BigNumber;
      }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setReportAsCleaned(
      _reportId: BigNumberish,
      _proof: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitReport(
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    subscribeToClean(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalReports(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateReportMetadata(
      _reportId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MODERATORS(overrides?: CallOverrides): Promise<string>;

  addAdditionalProofs(
    _reportId: BigNumberish,
    _proof: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addRewards(
    _reportId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveReport(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deleteReport(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPaginatedReports(
    page: BigNumberish,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Cleanify.ReportStructOutput[]>;

  getReportById(
    _reportId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Cleanify.ReportStructOutput>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  handleVerificationRequest(
    _reportId: BigNumberish,
    _isCleaned: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserSubscribedAsCleaner(
    _reportId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reportIdToIndex(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reports(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, string, BigNumber] & {
      id: BigNumber;
      creator: string;
      state: number;
      metadata: string;
      totalRewards: BigNumber;
    }
  >;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setReportAsCleaned(
    _reportId: BigNumberish,
    _proof: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitReport(
    _metadata: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  subscribeToClean(
    _reportId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalReports(overrides?: CallOverrides): Promise<BigNumber>;

  updateReportMetadata(
    _reportId: BigNumberish,
    _metadata: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MODERATORS(overrides?: CallOverrides): Promise<string>;

    addAdditionalProofs(
      _reportId: BigNumberish,
      _proof: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewards(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveReport(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteReport(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaginatedReports(
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Cleanify.ReportStructOutput[]>;

    getReportById(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Cleanify.ReportStructOutput>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    handleVerificationRequest(
      _reportId: BigNumberish,
      _isCleaned: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserSubscribedAsCleaner(
      _reportId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reportIdToIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, string, BigNumber] & {
        id: BigNumber;
        creator: string;
        state: number;
        metadata: string;
        totalRewards: BigNumber;
      }
    >;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportAsCleaned(
      _reportId: BigNumberish,
      _proof: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitReport(_metadata: string, overrides?: CallOverrides): Promise<void>;

    subscribeToClean(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalReports(overrides?: CallOverrides): Promise<BigNumber>;

    updateReportMetadata(
      _reportId: BigNumberish,
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CleaningVerificationApproved(uint256)"(
      reportId?: BigNumberish | null
    ): CleaningVerificationApprovedEventFilter;
    CleaningVerificationApproved(
      reportId?: BigNumberish | null
    ): CleaningVerificationApprovedEventFilter;

    "CleaningVerificationDenied(uint256)"(
      reportId?: BigNumberish | null
    ): CleaningVerificationDeniedEventFilter;
    CleaningVerificationDenied(
      reportId?: BigNumberish | null
    ): CleaningVerificationDeniedEventFilter;

    "NewProofAdded(uint256,address,string)"(
      reportId?: BigNumberish | null,
      cleaner?: string | null,
      proof?: null
    ): NewProofAddedEventFilter;
    NewProofAdded(
      reportId?: BigNumberish | null,
      cleaner?: string | null,
      proof?: null
    ): NewProofAddedEventFilter;

    "NewReportSubmited(uint256,address)"(
      reportId?: BigNumberish | null,
      creator?: string | null
    ): NewReportSubmitedEventFilter;
    NewReportSubmited(
      reportId?: BigNumberish | null,
      creator?: string | null
    ): NewReportSubmitedEventFilter;

    "ReportDeleted(uint256,address)"(
      reportId?: BigNumberish | null,
      creator?: string | null
    ): ReportDeletedEventFilter;
    ReportDeleted(
      reportId?: BigNumberish | null,
      creator?: string | null
    ): ReportDeletedEventFilter;

    "ReportSetAsCleaned(uint256,address)"(
      reportId?: BigNumberish | null,
      cleaner?: string | null
    ): ReportSetAsCleanedEventFilter;
    ReportSetAsCleaned(
      reportId?: BigNumberish | null,
      cleaner?: string | null
    ): ReportSetAsCleanedEventFilter;

    "ReportStateChanged(uint256,uint8)"(
      reportId?: BigNumberish | null,
      newState?: null
    ): ReportStateChangedEventFilter;
    ReportStateChanged(
      reportId?: BigNumberish | null,
      newState?: null
    ): ReportStateChangedEventFilter;

    "RewardAdded(uint256,address,uint256)"(
      reportId?: BigNumberish | null,
      contributor?: string | null,
      amount?: null
    ): RewardAddedEventFilter;
    RewardAdded(
      reportId?: BigNumberish | null,
      contributor?: string | null,
      amount?: null
    ): RewardAddedEventFilter;

    "RewardsDistributed(uint256,address[])"(
      reportId?: BigNumberish | null,
      cleaners?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      reportId?: BigNumberish | null,
      cleaners?: null
    ): RewardsDistributedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "UserSubscribedToClean(uint256,address)"(
      reportId?: BigNumberish | null,
      subscriber?: null
    ): UserSubscribedToCleanEventFilter;
    UserSubscribedToClean(
      reportId?: BigNumberish | null,
      subscriber?: null
    ): UserSubscribedToCleanEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MODERATORS(overrides?: CallOverrides): Promise<BigNumber>;

    addAdditionalProofs(
      _reportId: BigNumberish,
      _proof: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addRewards(
      _reportId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    approveReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deleteReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPaginatedReports(
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReportById(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    handleVerificationRequest(
      _reportId: BigNumberish,
      _isCleaned: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserSubscribedAsCleaner(
      _reportId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reportIdToIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reports(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setReportAsCleaned(
      _reportId: BigNumberish,
      _proof: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitReport(
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    subscribeToClean(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReports(overrides?: CallOverrides): Promise<BigNumber>;

    updateReportMetadata(
      _reportId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MODERATORS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdditionalProofs(
      _reportId: BigNumberish,
      _proof: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addRewards(
      _reportId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deleteReport(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPaginatedReports(
      page: BigNumberish,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReportById(
      _reportId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    handleVerificationRequest(
      _reportId: BigNumberish,
      _isCleaned: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserSubscribedAsCleaner(
      _reportId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reportIdToIndex(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reports(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setReportAsCleaned(
      _reportId: BigNumberish,
      _proof: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitReport(
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    subscribeToClean(
      _reportId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReports(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateReportMetadata(
      _reportId: BigNumberish,
      _metadata: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
